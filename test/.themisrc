call themis#helper('command').with(themis#helper('assert'))
call themis#option('runtimepath', ['..'])

let s:QUICKFIX_OPENED = 'quickfix-opened' | lockvar s:QUICKFIX_OPENED
let s:QUICKFIX_CLOSED = 'quickfix-closed' | lockvar s:QUICKFIX_CLOSED

function! RunMockWith(dir) abort
  let state = s:new_fake_event_hooks(v:null)

  let path = $PATH
  let $PATH = $PATH . ':' . a:dir
  try
    call ghcid_quickfix#start({ _ -> state }, '')
  finally
    let $PATH = path
  endtry

  return state
endfunction

" Like g:ghcid_quickfix_show_only_error_occured.
function! s:new_fake_event_hooks(_) abort
  " quickfix: a fake state.
  " error_appeared_at_current: Did an error appear at between 'started or reloaded' and 'all good'?
  let instance = {
    \ 'quickfix': s:QUICKFIX_CLOSED,
    \ 'error_appeared_at_current': v:false,
  \ }

  function! instance.is_quickfix_opened() abort dict
    return self.quickfix ==# s:QUICKFIX_OPENED
  endfunction

  function! instance.is_quickfix_closed() abort dict
    return self.quickfix ==# s:QUICKFIX_CLOSED
  endfunction

  function! instance.on_quickfix_buffer_created() abort dict
    let self.quickfix = s:QUICKFIX_OPENED
  endfunction

  call themis#log(system('which ghcid'))
  function! instance.on_outputting_line(line) abort dict
    if ghcid_quickfix#lines#match_reloading(a:line)
      let self.error_appeared_at_current = v:false
      let self.quickfix = s:QUICKFIX_CLOSED
    elseif ghcid_quickfix#lines#match_all_good(a:line) && !self.error_appeared_at_current
      let self.quickfix = s:QUICKFIX_CLOSED
    elseif ghcid_quickfix#lines#match_error(a:line)
      let self.error_appeared_at_current = v:true
      let self.quickfix = s:QUICKFIX_OPENED
    endif
  endfunction

  return instance
endfunction
